
# boilerplate function
# function test-func() {
# 	if [[ $#BUFFER == 0 ]]; then
# 		echo -e "hello\r"
# 		BUFFER='hello'
# 		zle accept-line
# 	else
# 		BUFFER=${LBUFFER}"'"${RBUFFER}
# 		zle forward-char
# 	fi
# }
# zle -N test-func
# bindkey "'" test-func

# minimal hello world c program for busy people
hello_in_c() {
	echo '#include <stdio.h>'
	echo 'int main(void) {\n\tprintf("Hello, world!\\n");\n\treturn 0;\n}'
}

# arg version of `backward-kill-word'
# backward-kill-arg : kill whole argument separated by whitespaces
# backward-kill-word: kill a word (separated by whitespaces/=/- ...)
backward-kill-arg() {
    # make `backward-kill-word' behave like `backward-kill-arg'
    local WORDCHARS='~!#$%^&*(){}[]<>?.+;-_/\|=@`'
    zle backward-kill-word
}
zle -N backward-kill-arg

# print current directory's content
# when commandline buffer is not empty, run `expand-or-complete'
# instead (tab completion)
function expand-or-complete-or-list-files() {
	if [[ $#BUFFER == 0 ]]; then
		echo -e "\r"
		ls --color -C --width=${COLUMNS} -p
		zle accept-line
	else
		zle expand-or-complete
	fi
}
zle -N expand-or-complete-or-list-files

# quit history prompt like how emacs deals with C-g
quit-history-search() {
	# just a hack for breaking history search session
	zle backward-char
	zle forward-char
}
zle -N quit-history-search

# print current directory's content with `ls -l'
function long-list-files() {
    echo -e "\r"
    ls -hl --color -p -ltr | tr -d '\n'
    zle accept-line
}
zle -N long-list-files

# print current directory's content
# when commandline buffer is not empty, don't do anything
function dir-go-up-one-level() {

	if [[ -n $BUFFER ]]; then
		return 0
	fi

	cd ..
	zle accept-line
}
zle -N dir-go-up-one-level

# go to previous/next directory, like those handy
# previous/next page button in our browser
export FORWARD_HIST=''
export BACKWARD_HIST=''

# extend zsh's default `cd' to remember where it has been to
function cd() {

	if [ -z $BACKWARD_HIST ]; then
		BACKWARD_HIST=${PWD}
	else
		BACKWARD_HIST=${PWD}:${BACKWARD_HIST}
	fi
	FORWARD_HIST=''

	builtin cd $@
}

# go to next directory
function forward() {
	if [[ -n $BUFFER ]]; then
		zle forward-char
		return 0
	fi

	if [ -z $FORWARD_HIST ]; then
		return 0
	fi

	NEXT=$(echo $FORWARD_HIST | awk -F':' '{ print $1}')
	FORWARD_HIST=$(echo $FORWARD_HIST | \egrep -o ':.*' | sed 's/^.//')
	if [ -z $BACKWARD_HIST ]; then
		BACKWARD_HIST=${PWD}
	else
		BACKWARD_HIST=${PWD}:${BACKWARD_HIST}
	fi

	builtin cd ${NEXT}
	unset NEXT

	zle accept-line
}

# go to previous directory
function backward() {

	if [[ -n $BUFFER ]]; then
		zle backward-char
		return 0
	fi

	if [ -z $BACKWARD_HIST ]; then
		return 0
	fi

	NEXT=$(echo $BACKWARD_HIST | awk -F':' '{ print $1}')
	BACKWARD_HIST=$(echo $BACKWARD_HIST | \egrep -o ':.*' | sed 's/^.//')
	if [ -z $FORWARD_HIST ]; then
		FORWARD_HIST=${PWD}
	else
		FORWARD_HIST=${PWD}:${FORWARD_HIST}
	fi

	builtin cd ${NEXT}
	unset NEXT

	zle accept-line
}
zle -N forward
zle -N backward

# auto-completion from tmux buffer
completion-from-tmux-buffer() {
	INSERT_ITEM=$(tmux capture-pane -S - \; show-buffer \; delete-buffer 2>/dev/null | fzf --exact --print-query --height 10%)
	# first line is query string
	INSERT_ITEM1=$(echo ${INSERT_ITEM} | head -n 1)
	INSERT_ITEM2=$(echo ${INSERT_ITEM} | tail -n +2)
	INSERT_ITEM=$(echo ${INSERT_ITEM2} | sed -E "s/[[:space:]]+/\n/g" | fzf --exact --query=${INSERT_ITEM1} --height 10%)
	BUFFER=${LBUFFER}${INSERT_ITEM}
}
zle -N completion-from-tmux-buffer

# zsh equivalence of emacs' m-x
execute-named-cmd-menu() {
	CMD=$(zle -l -a | ag -v '^\.' | fzf --exact --query=${INSERT_ITEM1} --height 10%)
	zle ${CMD}
}
zle -N execute-named-cmd-menu

function run-it-commands() {
	CMD=$(ls --color=auto ${HOME}/.script | fzf --exact --no-mouse --height 50% --query='it- ')
	BUFFER=${CMD}
	zle accept-line
}
zle -N run-it-commands

function find-and-edit-file() {
	BUFFER="vim $(fd | fzf --exact --no-mouse --height 50%)"
	zle accept-line
}
zle -N find-and-edit-file

function find-and-edit-file-in-emacs() {
	BUFFER="e $(fd | fzf --exact --no-mouse --height 50%)"
	zle accept-line
}
zle -N find-and-edit-file

function edit-dotfile() {
	DOTFILE=$(find ${HOME}/.script/ ${HOME}/.dotfiles ${HOME}/.config ${HOME}/.config/btop -maxdepth 1 -mindepth 1 -not -path '*/\.git*' | fzf --exact --no-mouse --height 50%)

	if [ -z ${DOTFILE} ]; then
		zle accept-line
		return 0
	fi

	BUFFER="vim ${DOTFILE}"
	zle accept-line
}
zle -N edit-dotfile

function jump-to-nnn-bookmark() {
	# TODO: remove hard-coded path
	DEST=$(ls --color=auto ${HOME}/.config/nnn/bookmarks/ | fzf --exact --no-mouse --height 20%)

	if [ -z ${DEST} ]; then
		zle accept-line
		return 0
	fi

	DEST=${HOME}/.config/nnn/bookmarks/${DEST}

	BUFFER="cd `realpath ${DEST}`"
	zle accept-line
}
zle -N jump-to-nnn-bookmark

function keybinding-leader-key() {

	if [[ -n $BUFFER ]]; then
		BUFFER=${LBUFFER}'\'${RBUFFER}
		# XXX: now the backslash will be on the right side
		#      next to the cursor, let's move it by one char
		zle forward-char
		return 0
	fi

	read -k 1 NEXT_CHAR

	if [ ${NEXT_CHAR} = '\' ]; then
		BUFFER=${LBUFFER}'\'${RBUFFER}
		# XXX: now the backslash will be on the right side
		#      next to the cursor, let's move it by one char
		zle forward-char
	elif [ ${NEXT_CHAR} = 'r' ]; then
		fzf-history-widget
	elif [ ${NEXT_CHAR} = 'x' ]; then
		run-it-commands
	elif [ ${NEXT_CHAR} = 'y' ]; then
		tmux set-buffer "$(pwd -P)"
		echo "\nPwd \"$(tmux show-buffer)\" copied to clipboard of tmux."
		zle accept-line
	elif [ ${NEXT_CHAR} = 'v' ]; then
		_plchdr=$(tmux copy-mode)
	elif [ ${NEXT_CHAR} = 'e' ]; then
		edit-dotfile
	elif [ ${NEXT_CHAR} = 's' ]; then
		BUFFER='nnn -n'
		zle accept-line
	elif [ ${NEXT_CHAR} = 'f' ]; then
		find-and-edit-file
	elif [ ${NEXT_CHAR} = 'F' ]; then
		find-and-edit-file-in-emacs
	elif [ ${NEXT_CHAR} = 'z' ]; then
		BUFFER='it-perf-monitor'
		zle accept-line
	elif [ ${NEXT_CHAR} = 'w' ]; then
		jump-to-nnn-bookmark
	elif [ ${NEXT_CHAR} = 'g' ]; then
		BUFFER="tig"
		zle accept-line
	elif [ ${NEXT_CHAR} = 'p' ]; then
		fzf-file-widget
	elif [ ${NEXT_CHAR} = 'c' ]; then
		fzf-cd-widget
	fi
}
zle -N keybinding-leader-key
bindkey '\' keybinding-leader-key
bindkey '`' keybinding-leader-key

function tmux-select-and-paste-pwd() {
    SELECTED_PWD=$(tmux list-panes -a -F'#{session_name}:#{window_index}.#{pane_index}'   | \
		       xargs -I{} tmux display-message -p -F "#{pane_current_path}" -t {} | \
		       sort | uniq | fzf --exact --height 10%)
    BUFFER=${BUFFER}${SELECTED_PWD}

    zle forward-char -n $(($(echo ${SELECTED_PWD} | wc -m) - 1))
}
zle -N tmux-select-and-paste-pwd
bindkey '^[^p' tmux-select-and-paste-pwd

function e() {
    tmux select-window -t :=0
    emacsclient -n $1
}

function kill-word-whole() {
    # kill right hand side of cursor,
    # be careful of overkilling next argument
    # note: ${RBUFFER:0:1} = first char of string
    test "${RBUFFER:0:1}" != ' ' && zle kill-word
    # kill left hand side of cursor,
    # be careful of overkilling previous argument
    # note: ${LBUFFER: -1} = last char of string
    test "${LBUFFER: -1}" != ' ' && zle backward-kill-word
}
zle -N kill-word-whole
bindkey '^[d' kill-word-whole

function vif {
	vim "$(fzf --exact --no-mouse --height 50%)"
}

function cdf {
	cd "$(fzf --walker=dir --exact --no-mouse --height 50%)"
}
